plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'kotlinx-serialization'

}
def localPropertiesFile = rootProject.file("local.properties")
def localProperties = new Properties()
localProperties.load(new FileInputStream(localPropertiesFile))

android {

    packagingOptions {
// Exclude specific files or directories from packaging into your APK.
        exclude 'META-INF/gradle/incremental.annotation.processors'
    }

    namespace 'com.example.cryptomax'
    compileSdk 34

    buildFeatures {
        buildConfig = true
    }

    defaultConfig {
        buildConfigField "String", "NEWS_API_KEY", localProperties['news_access_key']
    }
    defaultConfig {
        buildConfigField "String", "NFT_API_KEY", localProperties['nft_access_key']
    }

    defaultConfig {
        applicationId "com.example.cryptomax"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
    }
    allprojects {
        apply plugin: "org.jlleitschuh.gradle.ktlint"
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.3'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}
dependencies {
    implementation(libs.androidx.ktx)
    implementation(libs.lifecycle.runtime.ktx)
    implementation(libs.activity.compose)
    implementation(platform(libs.compose.bom))
    implementation(libs.junit)
    implementation(libs.espresso.core)
    implementation(libs.hilt.android)
    implementation(libs.hilt.compiler)
    implementation(libs.tooling)
    kapt(libs.kapt)
    annotationProcessor(libs.hilt.android.annotation)
    implementation(libs.coil)
    implementation(libs.ktor.client.core)
    implementation(libs.ktor.client.android)
    implementation(libs.ktor.client.serialization)
    implementation(libs.ktor.client.logging)
    implementation(libs.kotlinx.serialization.json)
    implementation(libs.material.icons.extended)
    implementation(libs.navigation.compose)
    implementation(libs.hilt.navigation.compose)
    implementation(libs.material.icons.extended)
    implementation(libs.material3.design)
    implementation(libs.accompanist.pager)
    implementation(libs.accompanist.pager.indicators)
    implementation(libs.leakcanary.android)
}

kapt {
    correctErrorTypes true
}
